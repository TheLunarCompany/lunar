# Verifies that when MCPX starts with only mcp.json present (no app.yaml),
# the Access Controls page shows the built-in default profile row.
# Flow is aligned with permissions-smoke-test: load UI ➜ open sidebar ➜
# go to Access Controls ➜ assert default profile row.
name: "Init with mcp.json only"
image: us-central1-docker.pkg.dev/prj-common-442813/mcpx/mcpx:v0.2.12-19b82e8
env: {}
dependentContainers: []
configMount: config
cleanConfigMount: false
verboseOutput: false
disableTest: false

steps:
  - name: Load Control-Plane UI
    kind: browser
    toolName: browser_navigate
    payload:
      url: http://localhost:5173
    expected:
      mode: regex
      value: "Ran Playwright code"

  - name: Toggle sidebar open
    kind: browser
    toolName: browser_evaluate
    payload:
      function: |
        () => {
          const btn = Array.from(document.querySelectorAll('button'))
            .find(b => b.textContent?.trim() === 'Toggle Sidebar');
          if (!btn) return 'toggle-not-found';
          btn.click();
          return 'toggled-open';
        }
    expected:
      mode: regex
      value: "toggled-open"

  - name: Open Access Controls panel
    kind: browser
    toolName: browser_evaluate
    payload:
      function: |
        () => {
          const el = Array.from(document.querySelectorAll('a,button,div'))
            .find(e => e.textContent?.trim() === 'Access Controls');
          if (!el) return 'access-controls-not-found';
          el.click();
          return 'access-controls-clicked';
        }
    expected:
      mode: regex
      value: "access-controls-clicked"

  - name: Wait for “Agent Profile Permissions” header
    kind: browser
    toolName: browser_wait_for
    payload:
      text: "Agent Profile Permissions"
      time: 10
    expected:
      mode: contains
      value: "Waited for Agent Profile Permissions"

  - name: Verify default profile row is present
    kind: browser
    toolName: browser_evaluate
    payload:
      function: |
        () => {
          const table = document.querySelector('table');
          if (!table) return 'no-table';
          const rows = Array.from(table.querySelectorAll('tr')).slice(1); // skip header
          for (const tr of rows) {
            const profileInput = tr.querySelector('input[disabled], input');
            const profileVal = (profileInput?.value || '').trim().toLowerCase();

            const rowText = (tr.innerText || tr.textContent || '').toLowerCase();
            const hasAnyAgent = rowText.includes('any agent');
            const hasAllowAll = rowText.includes('allow all') ||
              (tr.querySelector('[role="combobox"]')?.innerText || '').toLowerCase().includes('allow all');
            const hasAllTools = rowText.includes('all tools');

            if (profileVal === 'default' && hasAnyAgent && hasAllowAll && hasAllTools) {
              return 'ok-default-row';
            }
          }
          // Debug payload if not found
          return JSON.stringify({
            inputs: Array.from(table.querySelectorAll('input')).map(i => i.value),
            rows: rows.length
          });
        }
    expected:      
      mode: contains
      value: ok-default-row