  /**
   * @return the okhttp3.Response obtained at the end of the sequence for the modified request.
   */
okhttp3.Response getResponseWithInterceptorChain() throws java.io.IOException {
    java.lang.String headerBasedAllowed = originalRequest.header(trafficFilter.getHeaderFilterKey());
    java.util.Optional headerBasedFilter = java.util.Optional.empty();
    if (headerBasedAllowed != null) {  
        headerBasedFilter = java.util.Optional.of(headerBasedAllowed);
        originalRequest = originalRequest
                .newBuilder()
                .removeHeader(trafficFilter.getHeaderFilterKey())
                .build(); 
    }  

    if (this.lunarGotError || !failSafe.stateOk() || !trafficFilter.isAllowed(originalRequest.url.host(), headerBasedFilter)){
        return originalGetResponse();
    }
    
    okhttp3.Request okHttpOriginalRequest = originalRequest;

    routingData = new dev.lunar.interceptor.RoutingData(
                originalRequest.url.host(),
                originalRequest.url.scheme(),
                originalRequest.url.port(),
                this.lunarRequestID);

    String modifiedUrl = routingData.buildUrl(originalRequest.url.encodedPath(), originalRequest.url.encodedQuery());
    
    okhttp3.Request.Builder builder = originalRequest
                    .newBuilder()
                    .url(okhttp3.HttpUrl.parse(modifiedUrl))
                    .removeHeader(routingData.getHostHeaderKey())
                    .addHeader(routingData.getHostHeaderKey(), routingData.getHostHeaderValue())
                    .addHeader(routingData.getLunarRequestIdHeaderKey(), routingData.getRequestId())
                    .addHeader(routingData.getSchemeHeaderKey(), routingData.getSchemeHeaderValue())
                    .addHeader(routingData.getLunarInterceptorHeaderKey(), routingData.getLunarInterceptorHeaderValue());

    if (trafficFilter.isProxyManaged()) {
        builder = builder.addHeader(routingData.getLunarTenantIdHeaderKey(), routingData.getLunarTenantIdHeaderValue());
    }

    if (this.lunarRetry.getSequenceId().isPresent()) {
        String sequenceIdStr = (String)this.lunarRetry.getSequenceId().get(); 
        builder = builder.addHeader(this.lunarRetry.getLunarSeqIdHeaderKey(), sequenceIdStr);
    }

    originalRequest = builder.build();

    boolean isError = false;
    okhttp3.Response res = null;

    try{
        res = originalGetResponse();
        java.util.Map headers = res.headers().toMultimap();
        java.util.Optional sequenceId = this.lunarRetry.prepareForRetry(headers);

        if (sequenceId.isPresent()) {
            return okhttp3.RealCall.newRealCall(client, okHttpOriginalRequest, forWebSocket).execute(sequenceId, java.util.Optional.of(routingData.getRequestId()), isError);
        }

        isError = failSafe.isErrorHeader(headers);
        if(isError){
            lunarLogger.warning("Request: " + routingData.getRequestId() + " - An error occurs on the Proxy side");
        }

    } catch (java.lang.Exception e) {
        isError = true;
        lunarLogger.severe("Request: " + routingData.getRequestId() +  " - Error communicating with LunarProxy, "
            + "Error: " + e.getMessage() + ""
        );
        if (lunarLogger.isDebugLevel()) {
            lunarLogger.debug("", e);
        }
    }
    
    if (isError){
        failSafe.onError(routingData.getRequestId());
        return okhttp3.RealCall.newRealCall(client, okHttpOriginalRequest, forWebSocket).execute(java.util.Optional.empty(), java.util.Optional.of(routingData.getRequestId()), isError);
    }

    failSafe.onSuccess(routingData.getRequestId());
    return res;
}
